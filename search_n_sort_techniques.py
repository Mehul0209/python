# -*- coding: utf-8 -*-
"""search-n-sort-techniques.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/Mehul0209/c11d6a73644ad4e89b1b03ddbfe871a3/search-n-sort-techniques.ipynb

*   Arrays 1D

Search for a string in given string using linear search
"""

import array #before doing any problem based on arrays, import arrays

"""**Linear Search**"""

A=array.array('i',[23,74,14,54,321])
key=int(input("enter the value to be searched: "))
for i,j in enumerate(A):
  if j==key:
    print ("needed value is at ", i)
    break

A=array.array('i',[23,74,14,54,321])

for i,j in enumerate(A):
  print (j,end="")
print()
for i,j in enumerate(A):
  print (i,end="")

"""Linear Search #2"""

def lsearch(A,k):
  for i in range (len(A)):
    if A[i]==k:
      return i
  return -1

A=array.array('i',[3,76,87,34,94,50,12])
key=int(input("enter key value"))
I=lsearch(A,key)
if I==-1:
  print(key,"not in this array")
else:
  print(key,"is at ", I+1)

"""**Binary Search**"""

def bsearch(A,k):
  low=0
  high=len(A)

  while (low<high):

    mid=(high+low)//2
    if A[mid]==k:
      return mid
    elif (A[mid]>k):
      high=mid
    else:
       low=mid+1
  return -1

A=array.array('i', [1,4,9,16,25])
key=int(input("enter dersired value "))
low=0
high=len(A)

I=bsearch(A,key)
if I==-1:
  print(key ," doesn't belong to this array")
else:
  print(key,"is at position", I+1)

"""**Bubble** **Sorting**"""

def swap(a,b):
    return (b,a)

A=array.array('i',[25,14,36,96,45,74])
n=len(A)
for j in range (n-1):
  for k in range(n-j-1):

   if A[k]>A[k+1]:
      A[k],A[k+1]=swap(A[k],A[k+1])
      print (A)
print ("final array is ", A)

"""**Selection Sort**"""

A=array.array('i',[34,78,98,47,19,0])
for i in range (len(A)-1):
  min=A[i]
  k=i
  for j in range (i+1,len(A)):
    if min>A[j]:
      min=A[j]
      k=j
  if (k!=i):
    A[k],A[i]=swap(A[k],A[i])
  print (A)
print ("final array is ",A)

